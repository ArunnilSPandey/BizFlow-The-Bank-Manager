rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isBanker(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)/userGameRoles/$(request.auth.uid)).data.role == 'Banker';
    }

    // Add this function to validate player transactions
    function hasEnoughFunds(gameId, playerId, amount) {
      let playerData = get(/databases/$(database)/documents/games/$(gameId)/players/$(playerId)).data;
      return playerData.balance >= amount;
    }

    // Rules for the 'games' collection
    match /games/{gameId} {
      // Any authenticated user can create a game.
      allow create: if isUserAuthenticated();

      // Any authenticated user can read game data (to join or view).
      allow read: if isUserAuthenticated();

      // Only the Banker can update game properties (like starting the game).
      allow update: if isUserAuthenticated() && isBanker(gameId);

      // Game deletion is not allowed for now.
      allow delete: if false;

      // Rules for 'players' subcollection
      match /players/{playerId} {
        // Only the Banker can create, update, or delete players.
        allow write: if isUserAuthenticated() && isBanker(gameId);

        // Any authenticated user in the game can read player data.
        allow read: if isUserAuthenticated();
      }

      // Rules for 'transactions' subcollection
      match /transactions/{transactionId} {
        // Only the Banker can create transactions.
        // The transaction must be valid (for player-to-player, the from player must have sufficient funds)
        allow create: if isUserAuthenticated() && isBanker(gameId) && 
          (
            request.resource.data.fromId == "bank" || 
            hasEnoughFunds(gameId, request.resource.data.fromId, request.resource.data.amount)
          );
        allow create: if isUserAuthenticated() && isBanker(gameId);
        
        // No one can update or delete transactions to maintain a clear audit trail.
        allow update, delete: if false;

        // Any authenticated user in the game can read transaction data.
        allow read: if isUserAuthenticated();
      }

      // Rules for 'userGameRoles' subcollection
      match /userGameRoles/{userId} {
        // A user can create their own role document (when joining/creating).
        allow create: if isUserAuthenticated() && isOwner(userId);
        
        // A user can update their own role (e.g., online status).
        allow update: if isUserAuthenticated() && isOwner(userId);

        // All authenticated users can read the roles.
        allow read: if isUserAuthenticated();
        
        // Deletion is not allowed.
        allow delete: if false;
      }
    }
  }
}
